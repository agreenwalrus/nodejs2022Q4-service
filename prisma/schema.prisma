generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login     String
  version   Int        @default(1)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamptz(3)
  password  String
  favorite  Favorite[]

  @@map("user")
}

model Track {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  artistId      String?         @map("artist_id") @db.Uuid
  albumId       String?         @map("album_id") @db.Uuid
  duration      Int
  favoriteTrack FavoriteTrack[]
  album         Album?          @relation(fields: [albumId], references: [id])
  artist        Artist?         @relation(fields: [artistId], references: [id])

  @@map("track")
}

model Artist {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  grammy         Boolean          @default(false)
  albums         Album[]
  favoriteArtist FavoriteArtist[]
  tracks         Track[]

  @@map("artist")
}

model Album {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  year          Int
  artistId      String?         @map("artist_id") @db.Uuid
  artist        Artist?         @relation(fields: [artistId], references: [id])
  favoriteAlbum FavoriteAlbum[]
  tracks        Track[]

  @@map("album")
}

model Favorite {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String           @map("user_id") @db.Uuid
  user           User             @relation(fields: [userId], references: [id])
  favoriteAlbum  FavoriteAlbum[]
  favoriteArtist FavoriteArtist[]
  favoriteTrack  FavoriteTrack[]

  @@unique([id, userId])
  @@map("favorite")
}

model FavoriteArtist {
  artistId   String   @map("artist_id") @db.Uuid
  artist     Artist   @relation(fields: [artistId], references: [id])
  favorite   Favorite @relation(fields: [favoriteId], references: [id])
  favoriteId String   @db.Uuid

  @@unique([favoriteId, artistId])
  @@map("favorite_artist")
}

model FavoriteAlbum {
  albumId    String   @map("album_id") @db.Uuid
  album      Album    @relation(fields: [albumId], references: [id])
  favorite   Favorite @relation(fields: [favoriteId], references: [id])
  favoriteId String   @db.Uuid

  @@unique([favoriteId, albumId])
  @@map("favorite_album")
}

model FavoriteTrack {
  trackId    String   @map("track_id") @db.Uuid
  track      Track    @relation(fields: [trackId], references: [id])
  favorite   Favorite @relation(fields: [favoriteId], references: [id])
  favoriteId String   @db.Uuid

  @@unique([favoriteId, trackId])
  @@map("favorite_track")
}
